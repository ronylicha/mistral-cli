#!/usr/bin/env python3
"""
Script de test pour l'ex√©cuteur de commandes sur dossiers.
"""

import os
import json
from pathlib import Path

def demonstrate_commands():
    """D√©montre l'utilisation des commandes pr√©d√©finies."""
    
    print("üß™ D√©monstration de l'ex√©cuteur de commandes sur dossiers\n")
    
    # V√©rifier que le dossier de test existe
    test_dir = "exemple_dossier_test"
    if not os.path.exists(test_dir):
        print(f"‚ùå Dossier de test manquant: {test_dir}")
        print("Cr√©ez-le d'abord avec quelques fichiers de code.")
        return
    
    # Lister les fichiers de test
    print(f"üìÅ Contenu du dossier de test '{test_dir}':")
    for file in os.listdir(test_dir):
        file_path = os.path.join(test_dir, file)
        if os.path.isfile(file_path):
            size = os.path.getsize(file_path)
            print(f"   ‚Ä¢ {file} ({size} bytes)")
    
    print("\n‚ö° Commandes disponibles pour l'ex√©cution sur dossiers:\n")
    
    # Simuler les commandes disponibles
    commands = {
        "refactor_all": "Refactoriser tous les fichiers de code pour am√©liorer la structure",
        "add_documentation": "Ajouter de la documentation manquante √† tous les fichiers",
        "security_audit": "Auditer la s√©curit√© et corriger les vuln√©rabilit√©s",
        "optimize_performance": "Optimiser les performances de tous les fichiers",
        "modernize_code": "Moderniser le code avec les derni√®res pratiques",
        "add_error_handling": "Ajouter une gestion d'erreurs robuste",
        "clean_code": "Appliquer les principes du Clean Code",
        "add_tests": "G√©n√©rer des tests unitaires pour le code"
    }
    
    for i, (cmd, desc) in enumerate(commands.items(), 1):
        print(f"  {i:2d}. {cmd:<20} - {desc}")
    
    print(f"\n   0. Commande personnalis√©e")
    
    print("\nüöÄ Pour utiliser ces commandes:")
    print("   1. Lancez: mistral-cli")
    print("   2. Utilisez: /execute_command")
    print("   3. S√©lectionnez une commande pr√©d√©finie ou entrez une commande personnalis√©e")
    print("   4. Configurez le dossier, les patterns de fichiers, et les options")
    print("   5. Confirmez l'ex√©cution")
    
    print("\nüí° Exemples d'utilisation:")
    print("   ‚Ä¢ Refactoriser tout un projet Python: patterns='*.py', command='refactor_all'")
    print("   ‚Ä¢ Audit de s√©curit√© sur du code web: patterns='*.js,*.php', command='security_audit'")
    print("   ‚Ä¢ Ajouter de la doc sur du Java: patterns='*.java', command='add_documentation'")
    print("   ‚Ä¢ Ordre personnalis√©: 'Convertis tous les commentaires en fran√ßais'")
    
    print("\nüîç Fonctionnalit√©s avanc√©es:")
    print("   ‚úÖ Analyse r√©cursive des sous-dossiers")
    print("   ‚úÖ Pr√©visualisation avant ex√©cution")  
    print("   ‚úÖ Application automatique optionnelle")
    print("   ‚úÖ Cr√©ation de backups automatiques")
    print("   ‚úÖ Rapports d√©taill√©s avec statistiques")
    print("   ‚úÖ Filtrage par taille de fichier")
    print("   ‚úÖ Exclusion des dossiers syst√®me")
    
    print("\nüìä Exemple de sortie:")
    example_output = {
        "command": "add_documentation",
        "folder_path": "./exemple_dossier_test",
        "total_files_found": 4,
        "files_processed": 4,
        "files_changed": 3,
        "files_skipped": 0,
        "errors_count": 0,
        "apply_changes": True
    }
    
    print(json.dumps(example_output, indent=2, ensure_ascii=False))
    
    print("\n‚ö†Ô∏è Important:")
    print("   ‚Ä¢ Les fichiers originaux sont toujours sauvegard√©s (.backup)")
    print("   ‚Ä¢ V√©rifiez les modifications avant de supprimer les backups")
    print("   ‚Ä¢ Les rapports sont sauvegard√©s automatiquement")
    print("   ‚Ä¢ La taille max par fichier est configurable (100KB par d√©faut)")

def create_demo_scenario():
    """Cr√©e un sc√©nario de d√©monstration complet."""
    
    print("\nüéØ SC√âNARIO DE D√âMONSTRATION")
    print("=" * 50)
    
    scenarios = [
        {
            "name": "Audit de s√©curit√© complet",
            "command": "security_audit",
            "patterns": ["*.py", "*.js", "*.php"],
            "description": "Analyse tous les fichiers de code pour identifier les vuln√©rabilit√©s"
        },
        {
            "name": "Modernisation de projet legacy",
            "command": "modernize_code",
            "patterns": ["*.java", "*.js"],
            "description": "Met √† jour le code avec les derni√®res bonnes pratiques"
        },
        {
            "name": "Am√©lioration de la documentation",
            "command": "add_documentation",
            "patterns": ["*.py", "*.java", "*.js"],
            "description": "Ajoute une documentation compl√®te √† tous les fichiers"
        },
        {
            "name": "Refactorisation g√©n√©rale",
            "command": "refactor_all", 
            "patterns": ["*.py", "*.js", "*.java", "*.go"],
            "description": "Am√©liore la structure et la lisibilit√© du code"
        }
    ]
    
    for i, scenario in enumerate(scenarios, 1):
        print(f"\n{i}. {scenario['name']}")
        print(f"   Commande: {scenario['command']}")
        print(f"   Patterns: {', '.join(scenario['patterns'])}")
        print(f"   Description: {scenario['description']}")
    
    print(f"\nüíª Pour ex√©cuter un sc√©nario:")
    print(f"   mistral-cli ‚Üí /execute_command ‚Üí [suivre les prompts]")

if __name__ == "__main__":
    demonstrate_commands()
    create_demo_scenario()
    
    print(f"\n‚úÖ D√©monstration termin√©e!")
    print(f"üöÄ Utilisez 'mistral-cli' puis '/execute_command' pour tester r√©ellement.")